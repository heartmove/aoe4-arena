_unit_ui_xaml = [[<StackPanel HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0, 200" 
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:engineSharedEffects="clr-namespace:WPFGUI.Shared.Effects;assembly=EngineUI.Shaders">

	<StackPanel.Resources>
		<DropShadowEffect x:Key="DropShadow" BlurRadius="0.5" ShadowDepth="1.5"  />
	
		<DataTemplate x:Key="ArenaUiUnit">
			<Border Margin="2,2,2,0" BorderThickness="2" BorderBrush="{Binding [Color]}"
					VerticalAlignment="Top">
						<Grid>
							<Rectangle Name="UnitBackground1"
									Width="{StaticResource HUDBuildQueueIconSize}"
									Height="{StaticResource HUDBuildQueueIconSize}"
									Visibility="{Binding [isMilitary], Converter={StaticResource BoolToVis}}"
									Fill="{StaticResource MilitaryButtonBgBrush}" />
					
							<Rectangle Name="UnitBackground4"
									Width="{StaticResource HUDBuildQueueIconSize}"
									Height="{StaticResource HUDBuildQueueIconSize}"
									Visibility="{Binding [isUpgrade], Converter={StaticResource BoolToVis}}"
									Fill="{StaticResource ResearchButtonBgBrush}" />
					
					
							<Rectangle Name="UnitBackground2"
									Width="{StaticResource HUDBuildQueueIconSize}"
									Height="{StaticResource HUDBuildQueueIconSize}"
									Visibility="{Binding [isMilitary], Converter={StaticResource BoolToVis}}"
									Fill="{StaticResource MilitaryLightButtonBgHighlightBrush}" />
					
							<Rectangle Name="UnitBackground3"
									Width="{StaticResource HUDBuildQueueIconSize}"
									Height="{StaticResource HUDBuildQueueIconSize}"
									Visibility="{Binding [isUpgrade], Converter={StaticResource BoolToVis}}"
									Fill="{StaticResource ResearchLightButtonBgHighlightBrush}" />
					


							<Image 
									Width="{StaticResource HUDBuildQueueIconSize}"
									Height="{StaticResource HUDBuildQueueIconSize}"
									Source="{Binding [icon]}"/>
							<TextBlock 
									VerticalAlignment="Top"
									HorizontalAlignment="Right"
									Style="{StaticResource HUDWhiteBaseTextBlock14ptStyle}"
									FontStyle="Italic"
									Text="{Binding [queued], Converter={StaticResource CastToIntOperator}}"
									Foreground="#C2C2C2"
			                		Effect="{StaticResource DropShadow}"
									Visibility="{Binding [queuedNot0], Converter={StaticResource BoolToVis}}" />
							<TextBlock 
									VerticalAlignment="Bottom"
									HorizontalAlignment="Left"
									Style="{StaticResource HUDWhiteBaseTextBlock14ptStyle}"
									Text="{Binding [count], Converter={StaticResource CastToIntOperator}}"
			                		Effect="{StaticResource DropShadow}"
									Visibility="{Binding [countNot0], Converter={StaticResource BoolToVis}}" />
							
						</Grid>
					</Border>	
		</DataTemplate>
		
		<DataTemplate x:Key="ArenaUiUnits">
			<ItemsControl Name="ArenaUiUnitsListOfPlayer" 
					ItemsSource="{Binding [units]}"
					HorizontalAlignment="Left"
					ItemTemplate="{StaticResource ArenaUiUnit}">
				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<StackPanel Orientation="Horizontal" FlowDirection="LeftToRight"/>
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
			</ItemsControl>
		</DataTemplate>
	</StackPanel.Resources>

	
	<ItemsControl ItemsSource="{Binding [players]}">
		<ItemsControl.ItemsPanel>
			<ItemsPanelTemplate>
				<StackPanel Orientation="Vertical"/>
			</ItemsPanelTemplate>
		</ItemsControl.ItemsPanel>
		<ItemsControl.ItemTemplate>
			<DataTemplate>
				<StackPanel>
					<ContentControl HorizontalAlignment="Left"
							ContentTemplate="{StaticResource ArenaUiUnits}"
							Content="{Binding}" />
				</StackPanel>
			</DataTemplate>
		</ItemsControl.ItemTemplate>
	</ItemsControl>
	
</StackPanel>
]]

_archon_unit_ui = {
	players = {
		
	}
}


function UnitUI_Init()
	if not UI_IsReplay() then 
		UI_AddChild("ScarDefault", "XamlPresenter", "arena_unit_ui", { IsHitTestVisible = true, Xaml = _unit_ui_xaml, DataContext = UI_CreateDataContext(_archon_unit_ui) })
	end
end 


function UnitUI_GetSquadAndResearch(player)
	local unitData = {}
	local smap = {}
	local spawnedMap = {}
	local iconDatas = {}
	local iconStyles = {}
	-- 先获取队列中的
	local eg = Player_GetEntities(player.id)
	local egCount = EGroup_Count(eg)
	
	
	
	for j=1, egCount do 
		local entity = EGroup_GetEntityAt(eg, j)
		if Entity_HasProductionQueue(entity) then 
			local queueSize = Entity_GetProductionQueueSize(entity)
			if queueSize > 0 then
				for k = 0, queueSize-1 do 
					local bp = UnitUI_DismissErrors(nil, function() return Entity_GetProductionQueueItem(entity, k) end)
					local bpType = UnitUI_DismissErrors(nil, function() return Entity_GetProductionQueueItemType(entity, k) end)
					local iconName = nil 
					if bp ~= nil and bpType ~= nil then 
						if bpType == PITEM_Spawn then 
							iconName = UnitUI_GetIconNameFromSquadBlueprint(bp, Player_GetRace(player.id))
							iconStyles[iconName] = {
								bgBrush = "MilitaryButtonBgBrush",
								highlightBrush = "MilitaryLightButtonBgHighlightBrush", 
								isUpgrade = false,
								isMilitary = true,
							}
						else  
							--table.insert(ubps, bp)
							iconName = UnitUI_GetIconNameFromUpgradeBlueprint(bp, Player_GetRace(player.id))
							iconStyles[iconName] = {
								bgBrush = "ResearchButtonBgBrush",
								highlightBrush = "ResearchLightButtonBgHighlightBrush", 
								isUpgrade = true,
								isMilitary = false,
							}
						end
					
						local scount = 0
						if smap[iconName] ~= nil then 
							scount = smap[iconName]
						end
						smap[iconName] = scount + 1
						if not UnitUI_TableContains(iconDatas, iconName) then 
							table.insert(iconDatas, iconName)
						end
					end
				end
			end
		end
	end
	
	-- AI准备部署的
	for _, spawnedData in pairs(player.preSpawnedList) do 
		local bp = BP_GetSquadBlueprint(spawnedData.bpName)
		iconName = UnitUI_GetIconNameFromSquadBlueprint(bp, Player_GetRace(player.id))
		iconStyles[iconName] = {
			bgBrush = "MilitaryButtonBgBrush",
			highlightBrush = "MilitaryLightButtonBgHighlightBrush", 
			isUpgrade = false,
			isMilitary = true,
		}
		local scount = 0
		if smap[iconName] ~= nil then 
			scount = smap[iconName]
		end
		smap[iconName] = scount + spawnedData.count
		if not UnitUI_TableContains(iconDatas, iconName) then 
			table.insert(iconDatas, iconName)
		end
		
	end
	
	-- AI准备升级的
	for _, ubp in pairs(player.preUpgrade) do 
		local bp = BP_GetUpgradeBlueprint(ubp)
		iconName = UnitUI_GetIconNameFromUpgradeBlueprint(bp, Player_GetRace(player.id))
		iconStyles[iconName] = {
			bgBrush = "ResearchButtonBgBrush",
			highlightBrush = "ResearchLightButtonBgHighlightBrush", 
			isUpgrade = true,
			isMilitary = false,
		}
		local scount = 0
		if smap[iconName] ~= nil then 
			scount = smap[iconName]
		end
		smap[iconName] = scount + 1
		if not UnitUI_TableContains(iconDatas, iconName) then 
			table.insert(iconDatas, iconName)
		end
	end
	
	if UI_IsReplay() then 
		local spawnedData = UnitUI_DismissErrors(nil, function() return UnitUI_GetSpawnedUnit(player, spawnedMap, iconDatas) end)
		if spawnedData ~= nil then 
			spawnedMap = spawnedData.spawnedMap
			iconDatas = spawnedData.iconDatas
		end
	end
	
	for j, icon in pairs(iconDatas) do
		local iconStyle = iconStyles[icon]
		if smap[icon] ~= nil then 
			local c = smap[icon]
			table.insert(unitData, {
				icon = icon,
				queued = c,
				Color = UI_GetColourAsString(Player_GetUIColour(player.id)),
				countNot0 = true,
				queuedNot0 = true,
				bgBrush = iconStyle.bgBrush,
				highlightBrush = iconStyle.highlightBrush,
				isUpgrade = iconStyle.isUpgrade,
					isMilitary = iconStyle.isMilitary
			})
		elseif spawnedMap[icon] ~= nil then 
			local c = spawnedMap[icon]
			table.insert(unitData, {
				icon = icon,
				queued = 0,
				count = c,
				Color = UI_GetColourAsString(Player_GetUIColour(player.id)),
				countNot0 = true,
				queuedNot0 = true,
				-- bgBrush = iconStyle.bgBrush,
				-- highlightBrush = iconStyle.highlightBrush,
				isUpgrade = false,
				isMilitary = true,
			})
		end
	end
	
	return unitData
end 


function UnitUI_GetSpawnedUnit(player, spawnedMap, iconDatas)
	-- 再获取已经部署的只包含单位
	local sg = Player_GetSquads(player.id)
	local sgCount = SGroup_CountSpawned(sg)
	for j = 1, sgCount do 
		local squad = UnitUI_DismissErrors(nil, function() return SGroup_GetSpawnedSquadAt(sg, j) end)
		local bp = UnitUI_DismissErrors(nil, function() return  Squad_GetBlueprint(squad) end)
		if squad ~= nil and bp ~= nil then 
			local iconName = UnitUI_GetIconNameFromSquadBlueprint(bp, Player_GetRace(player.id))
			local scount = 0
			if spawnedMap[iconName] ~= nil then 
				scount = spawnedMap[iconName]
			end
			spawnedMap[iconName] = scount + 1
			
			if not UnitUI_TableContains(iconDatas, iconName) then 
				table.insert(iconDatas, iconName)
			end
		end
	end
	
	return {
		iconDatas = iconDatas,
		spawnedMap = spawnedMap,
	}
end


function UnitUI_DismissErrors(default, func)
    local success, result = pcall(func)
    if success then
        return result
    end
    
    return default
end


function UnitUI_Update()
	if not UI_IsReplay() then 
		_archon_unit_ui.players = {}

		for i, player in pairs(PLAYERS) do 
			if Player_ObserveRelationship(player.id, localPlayer.id) == R_ALLY then 
				local unitData = UnitUI_GetSquadAndResearch(player)
				local playerContext = {
					units = unitData
				}
				
				table.insert(_archon_unit_ui.players, playerContext)
			end
		end
		UI_SetDataContext("arena_unit_ui", _archon_unit_ui)
	end
end 



function UnitUI_TableContains(targetTable, obj)
	for k, v in pairs(targetTable) do
		if v == obj then
			return true
		end
	end
	
	return false
end



function UnitUI_GetIconNameFromSquadBlueprintUnsafe(pbg, race)
	return BP_GetSquadUIInfo(pbg, race).iconName
end

function UnitUI_GetIconNameFromSquadBlueprint(pbg, race)
    return UnitUI_DismissErrors(nil, function() return UnitUI_GetIconNameFromSquadBlueprintUnsafe(pbg, race) end)
end

function UnitUI_GetIconNameFromUpgradeBlueprintUnsafe(pbg)
	return BP_GetUpgradeUIInfo(pbg).iconName
end

function UnitUI_GetIconNameFromUpgradeBlueprint(pbg)
    return UnitUI_DismissErrors(nil, function() return UnitUI_GetIconNameFromUpgradeBlueprintUnsafe(pbg) end)
end

function UnitUI_HasMilitaryIcon(bp, race)
	return BP_GetSquadUIInfo(bp, race).tooltipDataTemplate == "BuildingMilitaryDataTemplate"
end



